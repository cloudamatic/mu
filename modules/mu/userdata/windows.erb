<powershell>
Set-ExecutionPolicy Unrestricted -Force -Scope CurrentUser

$sshdUser = "sshd_service"
$tmp = "$env:Temp/mu-userdata"
mkdir $tmp
$logfile = "c:/Mu-Bootstrap-$([Environment]::UserName).log"
$basedir = 'c:/bin'
$cygwin_dir = "$basedir/cygwin"
$username = (whoami).Split('\')[1]
$WebClient = New-Object System.Net.WebClient
$awsmeta = "http://169.254.169.254/latest"
$pydir = 'c:/bin/python/python27'
$env:Path += ";$pydir\Scripts;$pydir"

function log
{
  Write-Host $args
  Add-Content "c:/Mu-Bootstrap-$([Environment]::UserName).log" "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) $args"
  Add-Content "c:/Mu-Bootstrap-GLOBAL.log" "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) $args"
}

function fetchSecret([string]$file){
  log "Fetching s3://<%= MU.adminBucketName %>/$file to $tmp/$file"
  aws.cmd s3 cp s3://<%= MU.adminBucketName %>/$file $tmp/$file
}

function importCert([string]$cert, [string]$store){
  fetchSecret($cert)
  if($cert -Match ".pfx$"){
    return Import-PfxCertificate -FilePath $tmp/$cert -CertStoreLocation Cert:\LocalMachine\$store
  } else {
    return Import-Certificate -FilePath $tmp/$cert -CertStoreLocation Cert:\LocalMachine\$store
  }
}

function Disable-SSHD
{
  if ((Get-Service "sshd" -ErrorAction SilentlyContinue) -and (Test-Path "$cygwin_dir/bin/bash.exe")) {
    log "Disabling pre-existing sshd"

    Stop-Service -ErrorAction SilentlyContinue sshd
    Stop-Process -ProcessName sshd -force -ErrorAction SilentlyContinue
    Invoke-Expression '& $cygwin_dir/bin/bash --login -c "cygrunsrv --stop sshd; cygrunsrv --remove sshd; net user sshd /delete; net user sshd_service /delete; mkpasswd > /etc/passwd"'
  }
}

log "- Invoked as $([Environment]::UserName) (system started at $(Get-CimInstance -ClassName win32_operatingsystem | select lastbootuptime)) -"

<% if !$mu.skipApplyUpdates %>
If (!(Test-Path "c:/mu-installer-ran-updates")){
  Stop-Service -ErrorAction SilentlyContinue sshd
}
<% end %>

<% if $mu.platform != "win2k16" %>
If ([Environment]::OSVersion.Version.Major -lt 10) {
  If ("$($myInvocation.MyCommand.Path)" -ne "$tmp/realuserdata_stripped.ps1"){
    $Error.Clear()
    Invoke-WebRequest -Uri "$awsmeta/user-data" -OutFile $tmp/realuserdata.ps1
    while($Error.count -gt 0){
      $Error.Clear()
      log "Failed to retrieve current userdata from $awsmeta/user-data, waiting 15s and retrying"
      sleep 15
      Invoke-WebRequest -Uri "$awsmeta/user-data" -OutFile $tmp/realuserdata.ps1
    }
    Get-Content $tmp/realuserdata.ps1 | Select-String -pattern '^#','^<' -notmatch | Set-Content $tmp/realuserdata_stripped.ps1
    If (Compare-Object (Get-Content $myInvocation.MyCommand.Path) (Get-Content $tmp/realuserdata_stripped.ps1)){
      log "Invoking $tmp/realuserdata.ps1 in lieu of $($myInvocation.MyCommand.Path)"
      Invoke-Expression $tmp/realuserdata_stripped.ps1
      exit
    }
  }
}
<% end %>
$admin_username = (Get-WmiObject -Query 'Select * from Win32_UserAccount Where (LocalAccount=True and SID like "%-500")').name
log "Local admin: $admin_username"

Add-Type -Assembly System.Web
$password = [Web.Security.Membership]::GeneratePassword(15,2)

If (!(Test-Path $basedir)){
  mkdir $basedir
}

<% if $mu.platform != "win2k16" %>
If ([Environment]::OSVersion.Version.Major -lt 10) {
  If (!(Get-ScheduledTask -TaskName 'run-userdata')){
    log "Adding run-userdata scheduled task (user NT AUTHORITY\SYSTEM)"
    Invoke-WebRequest -Uri "https://s3.amazonaws.com/cap-public/run-userdata_scheduledtask.xml" -OutFile $tmp/run-userdata_scheduledtask.xml
    Register-ScheduledTask -Xml (Get-Content "$tmp/run-userdata_scheduledtask.xml" | out-string) -TaskName 'run-userdata' -Force -User "NT AUTHORITY\SYSTEM"
  }
}
<% end %>
$awsid=(New-Object System.Net.WebClient).DownloadString("$awsmeta/meta-data/instance-id")

If (!(Test-Path $tmp/PSWindowsUpdate.zip)){
  If (!(Test-Path c:/Users/$admin_username/Documents/WindowsPowerShell/Modules)){
    mkdir c:/Users/$admin_username/Documents/WindowsPowerShell/Modules
  }

  $WebClient.DownloadFile("https://s3.amazonaws.com/cap-public/PSWindowsUpdate.zip","$tmp/PSWindowsUpdate.zip")
  Add-Type -A 'System.IO.Compression.FileSystem'

  If (!(Test-Path c:/windows/System32/WindowsPowerShell/v1.0/Modules/PSWindowsUpdate)){
    log "Extracting PSWindowsUpdate module to c:/windows/System32/WindowsPowerShell/v1.0/Modules"
    [IO.Compression.ZipFile]::ExtractToDirectory("$tmp/PSWindowsUpdate.zip", "c:/windows/System32/WindowsPowerShell/v1.0/Modules")
  }
  If (!(Test-Path c:/Users/$admin_username/Documents/WindowsPowerShell/Modules/PSWindowsUpdate)){
    log "Extracting PSWindowsUpdate module to c:/Users/$admin_username/Documents/WindowsPowerShell"
    [IO.Compression.ZipFile]::ExtractToDirectory("$tmp/PSWindowsUpdate.zip", "c:/Users/$admin_username/Documents/WindowsPowerShell/Modules")
  }
}

log "Setting Windows Update parameters in registry"
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update" -Name AUOptions -Value 3

If (!(Test-Path "$cygwin_dir/Cygwin.bat")){
  If (!(Test-Path $tmp/setup-x86_64.exe)){
    $WebClient.DownloadFile("http://cygwin.com/setup-x86_64.exe","$tmp/setup-x86_64.exe")
  }

  If (!(Test-Path $tmp/cygwin.zip)){
    log "Downloading Cygwin packages"
    $WebClient.DownloadFile("https://s3.amazonaws.com/mu-stuff/cygwin_20161022.zip","$tmp/cygwin.zip")
  }

  Add-Type -A 'System.IO.Compression.FileSystem'
  If (!(Test-Path $tmp/cygwin)){
    [IO.Compression.ZipFile]::ExtractToDirectory("$tmp/cygwin.zip", "$tmp/cygwin")
  }

  log "Running Cygwin installer"
  Start-Process -wait -FilePath "$tmp/setup-x86_64.exe" -ArgumentList "-q -n -l $tmp -l $tmp\cygwin -L -R $cygwin_dir -P openssh,mintty,vim,curl,openssl"
}

if (!(Get-Service "sshd" -ErrorAction SilentlyContinue)){
  log "Invoking ssh-host-config to enable sshd as $sshdUser (I am $admin_username)"
  Invoke-Expression -Debug '& $cygwin_dir/bin/bash --login -c "ssh-host-config -y -c ntsec -w ''$password'' -u $sshdUser" > $cygwin_dir/sshd_setup_log.txt'
  Invoke-Expression -Debug '& $cygwin_dir/bin/bash --login -c "sed -i.bak ''s/#.*StrictModes.*yes/StrictModes no/'' /etc/sshd_config" >> $cygwin_dir/sshd_setup_log.txt'
  Invoke-Expression -Debug '& $cygwin_dir/bin/bash --login -c "sed -i.bak ''s/#.*PasswordAuthentication.*yes/PasswordAuthentication no/'' /etc/sshd_config" >> $cygwin_dir/sshd_setup_log.txt'
  New-Item $cygwin_dir/sshd_installed_by.txt -type file -force -value $admin_username
  log "Creating c:/$awsid (<%= $mu.muID %>)"
  New-Item c:/$awsid -type file -force -value "<%= $mu.muID %>"
  log "Value in that file: $(Get-Content c:/$awsid)"
}

log "Ensuring domain or local users are in /etc/passwd for sshd"
if((Get-WmiObject win32_computersystem).partofdomain){
  Invoke-Expression -Debug '& $cygwin_dir/bin/bash --login -c "mkpasswd -d > /etc/passwd"'
  Invoke-Expression -Debug '& $cygwin_dir/bin/bash --login -c "mkgroup -l -d > /etc/group"'
} else {
  Invoke-Expression -Debug '& $cygwin_dir/bin/bash --login -c "mkpasswd -l > /etc/passwd"'
  Invoke-Expression -Debug '& $cygwin_dir/bin/bash --login -c "mkgroup -l > /etc/group"'
}

if (!(Get-WmiObject win32_computersystem).partofdomain){
  If (!(Test-Path "c:/mu-configure-initial-ssh-user")){
    log "making sure the ssh user is configured correctly"
    (([adsi]("WinNT://./$sshdUser, user")).psbase.invoke('SetPassword', "$password"))
    $sshd_service = Get-WmiObject Win32_Service -Filter "Name='sshd'"
    $sshd_service.Change($Null,$Null,$Null,$Null,$Null,$Null,".\$sshdUser",$password,$Null,$Null,$Null)

    $editrights="$cygwin_dir/bin/editrights"
    &$editrights -a SeAssignPrimaryTokenPrivilege -u $sshdUser
    &$editrights -a SeCreateTokenPrivilege -u $sshdUser
    &$editrights -a SeTcbPrivilege -u $sshdUser
    &$editrights -a SeServiceLogonRight -u $sshdUser
    Add-Content c:/mu-configure-initial-ssh-user "done"
  }
}

$sshd_svc_user = (Get-WmiObject -Query "SELECT * FROM win32_service WHERE name='sshd'").StartName
if ( $sshd_svc_user.contains("\") ){
  $sshd_svc_user = $sshd_svc_user.substring($sshd_svc_user.LastIndexOf("\")+1)
}
log "Chowning /var/empty, /var/log/sshd.log, and /etc/ssh* to $sshd_svc_user"
Invoke-Expression -Debug '& $cygwin_dir/bin/bash --login -c "chown $sshd_svc_user /var/empty /var/log/sshd.log /etc/ssh*; chmod 755 /var/empty"'

If (!((Get-ItemProperty HKLM:/SYSTEM/CurrentControlSet/Control/Lsa)."Authentication Packages" | Select-String -pattern "cyglsa64.dll")){
  If ((Test-Path "$cygwin_dir/bin/cyglsa-config")){
    log "Setting Cygwin LSA support, will reboot"
    Invoke-Expression '& $cygwin_dir/bin/bash --login -c "echo yes | /bin/cyglsa-config"'
    $need_reboot = $TRUE
  } else {
    log "Need to set Cygwin LSA support, but I don't see $cygwin_dir/bin/cyglsa-config!"
  }
}

If (!(Test-Path "$pydir\python.exe")){
  If (!(Test-Path $tmp/python-2.7.9.msi)){
    log "Downloading Python installer"
    $WebClient.DownloadFile("https://www.python.org/ftp/python/2.7.9/python-2.7.9.msi","$tmp/python-2.7.9.msi")
  }
  log "Running Python installer"
  (Start-Process -FilePath msiexec -ArgumentList "/i $tmp\python-2.7.9.msi /qn ALLUSERS=1 TARGETDIR=$pydir" -Wait -Passthru).ExitCode
}

If (!(Test-Path "$pydir\Scripts\aws.cmd")){
  If (!(Test-Path $tmp/get-pip.py)){
    log "Downloading get-pip.py"
    $WebClient.DownloadFile("https://bootstrap.pypa.io/get-pip.py","$tmp/get-pip.py")
  }
  python $tmp/get-pip.py
  log "Running pip install awscli"
  pip install awscli
}

function removeChef($location){
  $install_chef = $false
  $my_chef = (Get-ItemProperty $location | Where-Object {$_.DisplayName -like "chef client*"}).DisplayName
  if ($my_chef) {
    if ($my_chef -match '<%= MU.chefVersion %>'.split('-')[0]) {
      $install_chef = $false
    } else{
      log "Uninstalling Chef"
      $uninstall_string = (Get-ItemProperty $location | Where-Object {$_.DisplayName -like "chef client*"}).UninstallString
      $uninstall_string = ($uninstall_string -Replace "msiexec.exe","" -Replace "/I","" -Replace "/X","").Trim()
      $($uninstall_string -Replace '[\s\t]+', ' ').Split() | ForEach {
        log "msiexec.exe /X $_ /gn"
        start-process "msiexec.exe" -arg "/X $_ /qn" -Wait
      }
      $install_chef = $true
    }
  }
  
  return $install_chef
}

$key = "Microsoft\Windows\CurrentVersion\Uninstall\*"
If (!(Test-Path "c:\opscode\chef\embedded\bin\ruby.exe")){
  $install_chef = $true
} else {
  if (removeChef("HKLM:\Software\Wow6432Node\$key")){
    $install_chef = $true
  } elseif (removeChef("HKLM:\Software\$key")) {
    $install_chef = $true
  } else {
    $install_chef = $false
  }
}

If ($install_chef){
  log "Installing Chef"
  If (!(Test-Path $tmp/chef-installer-<%= MU.chefVersion %>.msi)){
    log "Downloading Chef installer"
    $WebClient.DownloadFile("https://www.chef.io/chef/download?p=windows&pv=2012&m=x86_64&v=<%= MU.chefVersion %>","$tmp/chef-installer-<%= MU.chefVersion %>.msi")
  }
  log "Running Chef installer"
  (Start-Process -FilePath msiexec -ArgumentList "/i $tmp\chef-installer-<%= MU.chefVersion %>.msi ALLUSERS=1 /le $tmp\chef-client-install.log /qn" -Wait -Passthru).ExitCode
  Set-Content "c:/mu_installed_chef" "yup"
}

<% if !$mu.skipApplyUpdates %>
If (!(Test-Path "c:/mu-installer-ran-updates")){
  log "Applying Windows updates"
  Import-Module PSWindowsUpdate
  Get-WUInstall -AcceptAll -IgnoreReboot
  Start-Sleep -s 60
  If (Test-Path "HKLM:/SOFTWARE/Microsoft/Windows/CurrentVersion/WindowsUpdate/Auto Update/RebootRequired"){
    log "Registry fiddling says I need a reboot"
    $need_reboot = $TRUE
  }
}
<% end %>

fetchSecret("<%= $mu.muID %>-secret")
log "Encrypting Mu deploy secret"
$deploy_secret = & "c:\opscode\chef\embedded\bin\ruby" -ropenssl -rbase64 -e "key = OpenSSL::PKey::RSA.new(Base64.urlsafe_decode64('<%= $mu.deployKey %>'))" -e "print Base64.urlsafe_encode64(key.public_encrypt(File.read('$tmp/<%= $mu.muID %>-secret')))"

function callMomma([string]$act)
{
  $params = @{mu_id='<%= $mu.muID %>';mu_resource_name='<%= $mu.resourceName %>';mu_resource_type='<%= $mu.resourceType %>';mu_instance_id="$awsid";mu_user='<%= $mu.muUser %>';mu_deploy_secret="$deploy_secret";$act="1"}
  log "Calling Momma Cat at https://52.0.111.223:2260 with $act"
  [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} # XXX
  $resp = Invoke-WebRequest -Uri https://52.0.111.223:2260 -Method POST -Body $params
  return $resp.Content
}

<% if $mu.windowsAdminName %>
if ((Get-WmiObject win32_computersystem).partofdomain -ne $true){
  if ("$admin_username" -ne "<%= $mu.windowsAdminName %>"){
    log "Changing local admin account from $admin_username to <%= $mu.windowsAdminName %>"
    ([adsi]("WinNT://./$admin_username, user")).psbase.rename("<%= $mu.windowsAdminName %>")
    $need_reboot = $TRUE
  }
}
<% end %>

$muca = importCert "Mu_CA.pem" "Root"

$myname = "<%= $mu.muID %>-<%= $mu.resourceName.upcase %>"

$nodecert = importCert "$myname.pfx" "My"
$thumb = $nodecert.Thumbprint
winrm create winrm/config/Listener?Address=*+Transport=HTTPS "@{Hostname=`"$myname`";CertificateThumbprint=`"$thumb`"}"

$winrmcert = importCert "$myname-winrm.crt" "TrustedPeople"
Set-Item -Path WSMan:\localhost\Service\Auth\Certificate -Value $true
$credstr = callMomma "mu_windows_admin_creds"
if($credstr){
  $credparts = $credstr.Split(";", 2)
  $creds = New-Object System.Management.Automation.PSCredential($credparts[0], (ConvertTo-SecureString $credparts[1] -AsPlainText -Force))
  if($creds){
    New-Item -Path WSMan:\localhost\ClientCertificate -Subject <%= $mu.windowsAdminName %> -URI * -Issuer $muca.Thumbprint -Force -Credential $creds
  }
}

winrm set winrm/config/winrs '@{MaxMemoryPerShellMB="300"}'
winrm set winrm/config '@{MaxTimeoutms="1800000"}'

if (!(Get-NetFirewallRule -DisplayName "Allow SSH" -ErrorAction SilentlyContinue)){
  log "Opening port 22 in Windows Firewall"
  New-NetFirewallRule -DisplayName "Allow SSH" -Direction Inbound -LocalPort 22 -Protocol TCP -Action Allow
}
if (!(Get-NetFirewallRule -DisplayName "Allow WinRM" -ErrorAction SilentlyContinue)){
  New-NetFirewallRule -DisplayName "Allow WinRM" -Direction Inbound -LocalPort 5986 -Protocol TCP -Action Allow
}

<% if $mu.windowsAdminName %>
log "Creating $cygwin_dir/home/<%= $mu.windowsAdminName %>/.ssh/authorized_keys"
New-Item $cygwin_dir/home/<%= $mu.windowsAdminName %>/.ssh/authorized_keys -type file -force -value "<%= $mu.deploySSHKey %>"
<% else %>
log "Creating $cygwin_dir/home/$admin_username/.ssh/authorized_keys"
New-Item $cygwin_dir/home/$admin_username/.ssh/authorized_keys -type file -force -value "<%= $mu.deploySSHKey %>"
<% end %>

if((Get-WURebootStatus -Silent) -eq $true){
  log "Get-WURebootStatus says to reboot"
  $need_reboot = $TRUE
}

if ($need_reboot){
  log "- REBOOT -"
  Restart-Computer -Force
  exit
} else {
  Add-Content c:/mu-installer-ran-updates "$(Get-Date -f MM-dd-yyyy_HH:mm:ss)"

  log "Enabling sshd service"
  sleep 30; Start-Service sshd
  Set-Service sshd -startuptype "Automatic"
  #Get-WUInstall -AcceptAll -AutoReboot

  callMomma "mu_bootstrap"
  log $(Get-Content $cygwin_dir/var/log/sshd.log)
}

Set-Content "c:/mu_userdata_complete" "yup"
Remove-Item -Recurse $tmp
# XXX
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Undefined
</powershell>
<persist>true</persist>
