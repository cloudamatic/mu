# Copyright:: Copyright (c) 2014 eGlobalTech, Inc., all rights reserved
#
# Licensed under the BSD-3 license (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the root of the project or at
#
#     http://egt-labs.com/mu/LICENSE.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

<powershell>
	Start-Transcript -path "$env:Temp/Mu-bootstrap.log" -force -append

	If ("$($myInvocation.MyCommand.Path)" -ne "$env:Temp/realuserdata_stripped.ps1"){
		Invoke-WebRequest -Uri "http://169.254.169.254/latest/user-data" -OutFile $env:Temp/realuserdata.ps1
		Get-Content $env:Temp/realuserdata.ps1 | Select-String -pattern '^#','^<' -notmatch | Set-Content $env:Temp/realuserdata_stripped.ps1
		If (Compare-Object (Get-Content $myInvocation.MyCommand.Path) (Get-Content $env:Temp/realuserdata_stripped.ps1)){
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Invoking $env:Temp/realuserdata.ps1 in lieu of $($myInvocation.MyCommand.Path)"
			Invoke-Expression $env:Temp/realuserdata_stripped.ps1
			exit
		}
	}
	$username = (whoami).Split('\')[1]
	New-Item $env:Temp/$username -type file -force
	if ( $username -ne "system"){
		Start-Transcript -path "$env:Temp/Mu-bootstrap.log" -force -append
		echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) IT BEGINS on $env:computername"

		$admin_username = (Get-WmiObject -Query 'Select * from Win32_UserAccount Where (LocalAccount=True and SID like "%-500")').name
		echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Local admin account is $admin_username"


		Set-Service BITS -startuptype "Automatic" -status Running -passthru

		Add-Type -Assembly System.Web
		$password = [Web.Security.Membership]::GeneratePassword(15,2)

		$base_dir = 'c:/bin'
		If (!(Test-Path $base_dir)){
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Creating $base_dir"
			New-Item -type directory -path $base_dir
		}

		# Make sure we're actually the right code, because Ec2Config
		# gets this wrong sometimes.
		Invoke-WebRequest -Uri "http://169.254.169.254/latest/user-data" -OutFile $env:Temp/realuserdata.ps1
		Compare-Object (Get-Content "c:/Program Files/Amazon/Ec2ConfigService/Scripts/UserScript.ps1") (Get-Content $env:Temp/realuserdata.ps1)

		$instanceid=(New-Object System.Net.WebClient).DownloadString("http://169.254.169.254/latest/meta-data/instance-id")
		$cygwin_dir = "$base_dir/cygwin"
		$sshdUser = "sshd_service"


		If (!(Test-Path "$cygwin_dir/$instanceid")){
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Processing Cygwin for the first time on this node"
			if ((Get-Service "sshd" -ErrorAction SilentlyContinue) -and (Test-Path "$cygwin_dir/bin/bash.exe")) {
				echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Disabling pre-existing sshd"

				Stop-Service -ErrorAction SilentlyContinue sshd 
				Invoke-Expression '& $cygwin_dir/bin/bash --login -c "cygrunsrv --stop sshd; cygrunsrv --remove sshd; net user sshd /delete; net user sshd_service /delete; mkpasswd > /etc/passwd"'
			}


			If (!(Test-Path "$cygwin_dir/Cygwin.bat")){
				Import-Module BitsTransfer
				If (!(Test-Path $env:Temp/setup-x86_64.exe)){
					echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Downloading Cygwin setup"

					Invoke-WebRequest -Uri "http://cygwin.com/setup-x86_64.exe" -OutFile $env:Temp/setup-x86_64.exe
	#				Start-BitsTransfer -source "http://cygwin.com/setup-x86_64.exe" -Destination $env:Temp/setup-x86_64.exe
				}


				If (!(Test-Path $env:Temp/cygwin.zip)){
					echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Downloading Cygwin packages"

					Invoke-WebRequest -Uri "https://s3.amazonaws.com/cap-public/cygwin_20141028.zip" -OutFile $env:Temp/cygwin.zip
	#				Start-BitsTransfer -source "https://s3.amazonaws.com/cap-public/cygwin_20141028.zip" -Destination $env:Temp/cygwin.zip

				}


				Add-Type -A 'System.IO.Compression.FileSystem'
				If (!(Test-Path $env:Temp/cygwin)){
					echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Extracting Cygwin packages"

					[IO.Compression.ZipFile]::ExtractToDirectory("$env:Temp/cygwin.zip", "$env:Temp/cygwin")
				}

				echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Running Cygwin installer"

				Start-Process -wait -FilePath "$env:Temp/setup-x86_64.exe" -ArgumentList "-q -n -l $env:Temp -l $env:Temp\cygwin -L -R $cygwin_dir -P openssh,mintty,vim,curl"
			}


			New-Item $cygwin_dir/$instanceid -type file -force -value "<%= $mu.muID %>"
		}

		if ((Test-Path $cygwin_dir\sshd_installed_as.txt) -and ((Get-Content $cygwin_dir\sshd_installed_as.txt) -ne $admin_username)){
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Changed Admin username, will reinstall sshd"
			if (Get-Service "sshd" -ErrorAction SilentlyContinue){
				echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Stopping sshd temporarily"

				Stop-Service -ErrorAction SilentlyContinue sshd
			}

			Invoke-Expression '& $cygwin_dir/bin/bash --login -c "cygrunsrv --stop sshd; cygrunsrv --remove sshd; net user sshd /delete; net user sshd_service /delete; mkpasswd > /etc/passwd"'
		}

		$python_path = 'c:\bin\python\python27'
		$env:Path += ";$python_path\Scripts;$python_path"
		If (!(Test-Path "$python_path\python.exe")){
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Installing Python"

			If (!(Test-Path $env:Temp/python-2.7.9.msi)){
				echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Downloading Python installer"

				Invoke-WebRequest -Uri "https://www.python.org/ftp/python/2.7.9/python-2.7.9.msi" -OutFile $env:Temp/python-2.7.9.msi
			}


			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Running Python installer"
			(Start-Process -FilePath msiexec -ArgumentList "/i $env:Temp\python-2.7.9.msi /qn ALLUSERS=1 TARGETDIR=$python_path" -Wait -Passthru).ExitCode
		}

	# Install chocolatey
	#	Set-ExecutionPolicy Unrestricted -Force
	#	Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
	#	Set-ExecutionPolicy Restricted -Force
	#	$env:Path = $env:Path + ";%ALLUSERSPROFILE%\chocolatey\bin"

		If (!(Test-Path "$python_path\Scripts\aws.cmd")){
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Installing awscli"
			If (!(Test-Path $env:Temp/get-pip.py)){
				echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Downloading get-pip.py"

				Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile $env:Temp/get-pip.py
			}
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Running get-pip.py"
			python $env:Temp/get-pip.py
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Running pip install awscli"
			pip install awscli
		}


		If (!(Test-Path "c:\opscode\chef\embedded\bin\ruby.exe")){
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Installing Chef"

			If (!(Test-Path $env:Temp/chef-installer.msi)){
				echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Downloading Chef installer"

				Invoke-WebRequest -Uri "https://www.opscode.com/chef/download?p=windows&pv=2012&m=x86_64&v=<%= MU.chefVersion %>" -OutFile $env:Temp/chef-installer.msi
			}


			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Running Chef installer"
			(Start-Process -FilePath msiexec -ArgumentList "/i $env:Temp\chef-installer.msi ALLUSERS=1 /le $env:Temp\chef-client-install.log /qn" -Wait -Passthru).ExitCode
		}

		If (!((Get-ItemProperty HKLM:/SYSTEM/CurrentControlSet/Control/Lsa)."Authentication Packages" | Select-String -pattern "cyglsa64.dll")){
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Running cyglsa-config to grant Cygwin binaries privileges"

			Invoke-Expression '& $cygwin_dir/bin/bash --login -c "echo yes | /usr/bin/cyglsa-config"'
			Restart-Computer -Force -Wait
		}

		echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Fetching Mu deploy secret from s3://<%= MU.adminBucketName %>/<%= $mu.muID %>-secret"
		aws.cmd s3 cp s3://<%= MU.adminBucketName %>/<%= $mu.muID %>-secret $env:Temp/<%= $mu.muID %>-secret

		echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Encrypting Mu deploy secret"
		$deploy_secret = & "c:\opscode\chef\embedded\bin\ruby" -ropenssl -rbase64 -e "key = OpenSSL::PKey::RSA.new(Base64.urlsafe_decode64('<%= $mu.deployKey %>'))" -e "print Base64.urlsafe_encode64(key.public_encrypt(File.read('$env:Temp/<%= $mu.muID %>-secret')))"



		if (!(Get-Service "sshd" -ErrorAction SilentlyContinue)){
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Invoking ssh-host-config"
			Invoke-Expression -Debug '& $cygwin_dir/bin/bash --login -c "ssh-host-config -y -c ntsec -w ''$password'' -u $sshdUser" > $cygwin_dir/sshd_setup_log.txt'
			Invoke-Expression -Debug '& $cygwin_dir/bin/bash --login -c "sed -i.bak ''s/#.*StrictModes.*yes/StrictModes no/'' /etc/sshd_config" >> $cygwin_dir/sshd_setup_log.txt'
			Invoke-Expression -Debug '& $cygwin_dir/bin/bash --login -c "sed -i.bak ''s/#.*PasswordAuthentication.*yes/PasswordAuthentication no/'' /etc/sshd_config" >> $cygwin_dir/sshd_setup_log.txt'
			New-Item $cygwin_dir/sshd_installed_as.txt -type file -force -value $admin_username
		}

		echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Creating $cygwin_dir/home/$admin_username/.ssh/authorized_keys"
		New-Item $cygwin_dir/home/$admin_username/.ssh/authorized_keys -type file -force -value "<%= $mu.deploySSHKey %>"

		if (!(Get-NetFirewallRule -DisplayName "Allow SSH" -ErrorAction SilentlyContinue)){
			echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Opening port 22 in Windows Firewall"
			New-NetFirewallRule -DisplayName "Allow SSH" -Direction Inbound -LocalPort 22 -Protocol TCP -Action Allow
		}

		echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Enabling sshd service"
		Start-Service sshd
		$url = 'https://<%= $mu.publicIP %>:2260'
		echo "$(Get-Date -f MM-dd-yyyy_HH:mm:ss) Calling home to $url"
		Start-Process -FilePath "c:\bin\cygwin\bin\curl.exe" -ArgumentList "-k --data mu_id='<%= $mu.muID %>' --data mu_resource_name='<%= $mu.resourceName %>' --data mu_resource_type='<%= $mu.resourceType %>' --data mu_instance_id='$instanceid' --data mu_bootstrap='1' --data mu_user='<%= $mu.muUser %>' --data mu_deploy_secret='$deploy_secret' $url" -Wait


		Stop-Transcript
	}
</powershell>
<persist>true</persist>
