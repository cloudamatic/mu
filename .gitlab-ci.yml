image: ruby:2.5

stages:
  - Lint Test
  - Test
  - Security Test
  - Build
  - Docker Build
  - Smoke Test
  - Merge/Tag
  - Deploy
  
Rubocop:
  stage: Lint Test
  image: chef/chefdk:latest
  variables: {
    CHEF_LICENSE: "accept"
  }
  script:
    - rubocop modules/
    - rubocop bin/
  allow_failure: true
  except:
    variables:
    - $IMAGE_BUILD

Cookstyle:
  stage: Lint Test
  image: chef/chefdk:latest
  variables: {
    CHEF_LICENSE: "accept"
  }
  script:
    - cookstyle cookbooks/
  allow_failure: true
  except:
    variables:
    - $IMAGE_BUILD

Foodcritic:
  stage: Lint Test
  image: chef/chefdk:latest
  variables: {
    CHEF_LICENSE: "accept"
  }
  script:
    - foodcritic cookbooks/ -t ~FC075 -t ~FC015 -t ~FC034 -t ~FC122 -X firewall/*
  except:
    variables:
    - $IMAGE_BUILD

Foodcritic Deprecations:
  stage: Lint Test
  image: chef/chefdk:latest
  variables: {
    CHEF_LICENSE: "accept"
  }
  script:
    - foodcritic cookbooks/ -t deprecated -t chef13 -t chef14 -t chef15 -X cokbooks/firewall/*
  except:
    variables:
    - $IMAGE_BUILD

ChefSpec:
  stage: Test
  image: chef/chefdk:latest
  variables: {
    CHEF_LICENSE: "accept"
  }
  script:
    - for d in ./cookbooks/*/ ; do (cd "$d" && chef exec rspec); done
  allow_failure: true
  except:
    variables:
    - $IMAGE_BUILD

.Rspec:
  stage: Test
  before_script:
    - cat spec/azure_creds | sed -e "s/__AZURE_CLIENT_ID__/${AZURE_CLIENT_ID}/" > spec/azure_creds.tmp
    - cp spec/azure_creds.tmp spec/azure_creds
    - cat spec/azure_creds | sed -e "s/__AZURE_CLIENT_SECRET__/${AZURE_CLIENT_SECRET}/" > spec/azure_creds.tmp
    - cp spec/azure_creds.tmp spec/azure_creds
    - cat spec/mu.yaml | sed -e "s/__AZURE_DIRECTORY_ID__/${AZURE_CLIENT_SECRET}/" > spec/mu.yaml.tmp
    - cp spec/mu.yaml.tmp spec/mu.yaml
    - cat spec/mu.yaml | sed -e "s/__AZURE_CLIENT_SECRET__/${AZURE_CLIENT_SECRET}/" > spec/mu.yaml.tmp
    - cp spec/mu.yaml.tmp spec/mu.yaml
  script:
    - cd modules
    - bundle install
    - gem install rspec simplecov simplecov-console
    - cd ../
    - rspec
  after_script:
    - shred -u spec/azure_creds
    - shred -u spec/azure_creds.tmp
    - shred -u spec/mu.yaml
    - shred -u spec/mu.yaml.tmp
  allow_failure: true
  except:
    variables:
    - $IMAGE_BUILD

New_Berks:
  stage: Test
  image: chef/chefdk:latest
  variables: {
    CHEF_LICENSE: "accept"
  }
  script:
    - apt-get -qq update
    - apt-get -qq install git -y
    - for d in `ls -1 ./cookbooks | grep -v '^firewall$'` ; do (echo && echo "Installing $d" && cd "cookbooks/$d" && berks install); done
    - for d in `ls -1 ./cookbooks | grep -v '^firewall$'` ; do (echo && echo "Verifying $d" && cd "cookbooks/$d" && berks verify); done
    - for d in `ls -1 ./cookbooks | grep -v '^firewall$'` ; do (echo && echo "Analyzing $d" && cd "cookbooks/$d" && berks outdated); done
  except:
    variables:
    - $IMAGE_BUILD
  
Berks:
  stage: Test
  image: chef/chefdk:latest
  variables: {
    CHEF_LICENSE: "accept"
  }
  script:
    - apt-get -qq update
    - apt-get -qq install git -y
    - rm -rf Berksfile.lock
    - berks install
    - berks verify
    - berks outdated
  except:
    variables:
    - $IMAGE_BUILD

Gem Build:
  stage: Build
  script:
    - gem build cloud-mu.gemspec
  only:
    - master
    - development
    - gen_docs
    - /^gem-.*$/
    - /^cicd-.*$/
  artifacts:
    paths:
    - cloud-mu-*.gem
  except:
    variables:
    - $IMAGE_BUILD

.Muby Build:
  stage: Build
  image: centos
  script: 
    - yum -y groupinstall 'Development Tools'
    - yum -y install rpm-build
    - yum-builddep -y extras/ruby_rpm/muby.spec
    - /usr/bin/rpmbuild -ba extras/ruby_rpm/muby.spec
    - echo "maybe do something cool and smart here?"
  only:
    - master
    - development
  allow_failure: true
  except:
    variables:
    - $IMAGE_BUILD

Gem Parser Test:
  stage: Smoke Test
  before_script: 
  - export AWS_REGION='us-east-1'
  script:
    - apt-get -qq update
    - apt-get -qq install dnsutils
    - curl https://gist.githubusercontent.com/ryantiger658/87ee6aca72802ce55211a7e6c6bfa76f/raw/aaa54c255936dcb7495b6befeababd44c162922d/.mu.yaml >> /root/.mu.yaml
    - gem install cloud-mu-*.gem
    - myip="$(dig +short myip.opendns.com @resolver1.opendns.com)"
    - mu-configure -n --aws-access-key="${AWS_ACCESS_KEY_ID}" --aws-access-secret="${AWS_SECRET_ACCESS_KEY}" --azure-directory-id="${AZURE_DIRECTORY_ID}" --azure-client-id="${AZURE_CLIENT_ID}" --azure-client-secret="${AZURE_CLIENT_SECRET}" --azure-subscription="${AZURE_SUBSCIPTION_ID}" --mu-admin-email="egt-labs-dev@eglobaltech.com" --public-address="${myip}" ---google-credentials-encoded="${GOOGLE_CREDS_ENCODED}" -google-region=us-east4 --google-project="egt-labs-admin" --aws-region=us-east-1 --azure-region=eastus
    - mu-deploy -d modules/tests/super_simple_bok.yml
    - mu-deploy -d modules/tests/super_complex_bok.yml
  dependencies:
  - Gem Build
  only:
    - master
    - development
    - /^gem-.*$/
    - /^cicd-.*$/
  allow_failure: true
  except:
    variables:
    - $IMAGE_BUILD

.Mu Install:
  stage: Smoke Test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  before_script:
  - export AWS_REGION='us-east-1'
  - yum install -qy ansible bind-utils
  script:
  - gem install cloud-mu-*.gem
  - curl https://gist.githubusercontent.com/ryantiger658/87ee6aca72802ce55211a7e6c6bfa76f/raw/aaa54c255936dcb7495b6befeababd44c162922d/.mu.yaml >> /root/.mu.yaml
  - myip="$(dig +short myip.opendns.com @resolver1.opendns.com)"
  - mu-configure -n --aws-access-key="${AWS_ACCESS_KEY_ID}" --aws-access-secret="${AWS_SECRET_ACCESS_KEY}" --azure-directory-id="${AZURE_DIRECTORY_ID}" --azure-client-id="${AZURE_CLIENT_ID}" --azure-client-secret="${AZURE_CLIENT_SECRET}" --azure-subscription="${AZURE_SUBSCIPTION_ID}" --google-credentials-encoded="${GOOGLE_CREDS_ENCODED}" --mu-admin-email="egt-labs-dev@eglobaltech.com" --public-address=$myip --google-region=us-east4 --aws-region=us-east-1 --azure-region=eastus
  - for cloud in AWS Azure Google; do mu-deploy install/mu-master.yaml -p name=$cloud-MU-$CI_COMMIT_SHORT_SHA -p cloud=$cloud; done
  only:
  - master
  - development
  - gem-mess_with_test_kitchen
  artifacts:
    paths:
    - /tmp/ssh_debug

Test Kitchen:
  stage: Smoke Test
  image: chef/chefdk:latest
  script:
  - kitchen test mu-install-aws-amazon2
  only:
  - master
  - development
  after_script:
  - kitchen destroy

Smoke Test:
  stage: Smoke Test
  before_script: 
  - export AWS_REGION='us-east-1'
  script:
  - apt-get -qq update
  - apt-get -qq -y install dnsutils
  - myip="$(dig +short myip.opendns.com @resolver1.opendns.com)"
  - mu-configure -n --aws-access-key="${AWS_ACCESS_KEY_ID}" --aws-access-secret="${AWS_SECRET_ACCESS_KEY}" --azure-directory-id="${AZURE_DIRECTORY_ID}" --azure-client-id="${AZURE_CLIENT_ID}" --azure-client-secret="${AZURE_CLIENT_SECRET}" --azure-subscription="${AZURE_SUBSCIPTION_ID}" --google-credentials-encoded="${GOOGLE_CREDS_ENCODED}" --google-region=us-east4 --mu-admin-email="egt-labs-dev@eglobaltech.com" --public-address="${myip}" --google-project="egt-labs-admin" --aws-region=us-east-1 --azure-region=eastus
  - mu-upload-chef-artifacts -sn
  - mu-deploy /opt/mu/var/demo_platform/applications/gitlab-server.yml -p vpc_id=vpc-040da43493f894a8d
  tags: 
  - mu-master
  only:
  - master
  - development
  when: manual
  except:
    variables:
    - $IMAGE_BUILD

Docker Build:
  stage: Docker Build
  services:
  - docker:dind
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375/
  dependencies:
    - Gem Build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - export MU_VERSION=$(grep '\.version' cloud-mu.gemspec | grep -o "'[^']*'" | tr -d "\'")
    - export OS=$(grep 'FROM' Dockerfile | grep -o " [a-zA-Z0-9:]*" | tr -d " " | tr ":" "-")
    - docker build -t $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$MU_VERSION -t $CI_REGISTRY_IMAGE:$MU_VERSION-$OS -t $CI_REGISTRY_IMAGE:$OS -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - echo "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" "$CI_REGISTRY_IMAGE:latest" "$CI_REGISTRY_IMAGE:$MU_VERSION" "$CI_REGISTRY_IMAGE:$MU_VERSION-$OS" "$CI_REGISTRY_IMAGE:$OS" | xargs -n 1 docker push
    #- docker run my-docker-image /script/to/run/tests
  only:
    - master
    - development
    - /^gem-.*$/
    - /^cicd-.*$/
  except:
    variables:
    - $IMAGE_BUILD

DockerTest:
  stage: Smoke Test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  script:
    - export MU_VERSION=$(grep '\.version' cloud-mu.gemspec | grep -o "'[^']*'" | tr -d "\'")
    - echo "hello from mu $MU_VERSION"
  only:
    - master
    - development
    - /^gem-.*$/
    - /^cicd-.*$/

DockerDeploy:
  stage: Deploy
  services:
  - docker:dind
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375/
  when: on_success
  script:
    - export MU_VERSION=$(grep '\.version' cloud-mu.gemspec | grep -o "'[^']*'" | tr -d "\'")
    - export OS=$(grep 'FROM' Dockerfile | grep -o " [a-zA-Z0-9:]*" | tr -d " " | tr ":" "-")
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA egtlabs/mu:latest
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA egtlabs/mu:$MU_VERSION
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA egtlabs/mu:$MU_VERSION-$OS
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA egtlabs/mu:$OS
    - echo $DOCKER_PASS | docker login --username zr2d2 --password-stdin
    - echo "egtlabs/mu:latest" "egtlabs/mu:$MU_VERSION" "egtlabs/mu:$MU_VERSION-$OS" "egtlabs/mu:$OS" | xargs -n 1 docker push
  only:
    - master

DockerDeploy Manual:
  stage: Deploy
  services:
  - docker:dind
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375/
  when: manual
  script:
    - export MU_VERSION=$(grep '\.version' cloud-mu.gemspec | grep -o "'[^']*'" | tr -d "\'")
    - export OS=$(grep 'FROM' Dockerfile | grep -o " [a-zA-Z0-9:]*" | tr -d " " | tr ":" "-")
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA egtlabs/mu:latest
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA egtlabs/mu:$MU_VERSION
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA egtlabs/mu:$MU_VERSION-$OS
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA egtlabs/mu:$OS
    - echo $DOCKER_PASS | docker login --username zr2d2 --password-stdin
    - echo "egtlabs/mu:latest" "egtlabs/mu:$MU_VERSION" "egtlabs/mu:$MU_VERSION-$OS" "egtlabs/mu:$OS" | xargs -n 1 docker push
  only:
  - development
  - /^gem-.*$/
  - /^cicd-.*$/

Gen Docs:
  stage: Merge/Tag
  before_script: 
  - export AWS_REGION='us-east-1'
  script:
  - apt-get -qq update
  - apt-get -qq -y install dnsutils
  - curl https://gist.githubusercontent.com/ryantiger658/87ee6aca72802ce55211a7e6c6bfa76f/raw/aaa54c255936dcb7495b6befeababd44c162922d/.mu.yaml >> /root/.mu.yaml
  - myip="$(dig +short myip.opendns.com @resolver1.opendns.com)"
  - mu-configure -n --aws-access-key="${AWS_ACCESS_KEY_ID}" --aws-access-secret="${AWS_SECRET_ACCESS_KEY}" --azure-directory-id="${AZURE_DIRECTORY_ID}" --azure-client-id="${AZURE_CLIENT_ID}" --azure-client-secret="${AZURE_CLIENT_SECRET}" --azure-subscription="${AZURE_SUBSCIPTION_ID}" --google-credentials-encoded="${GOOGLE_CREDS_ENCODED}" --mu-admin-email="egt-labs-dev@eglobaltech.com" --public-address=$myip --google-region=us-east4 --aws-region=us-east-1 --azure-region=eastus
  - gem install cloud-mu-*.gem
  - ruby bin/mu-configure -n --aws-access-key="${AWS_ACCESS_KEY_ID}" --aws-access-secret="${AWS_SECRET_ACCESS_KEY}" --azure-directory-id="${AZURE_DIRECTORY_ID}" --azure-client-id="${AZURE_CLIENT_ID}" --azure-client-secret="${AZURE_CLIENT_SECRET}" --azure-subscription="${AZURE_SUBSCIPTION_ID}" --google-credentials-encoded="${GOOGLE_CREDS_ENCODED}" --mu-admin-email="egt-labs-dev@eglobaltech.com" --public-address="${MY_ADDR}" --google-project="egt-labs-admin" --google-region=us-east4 --aws-region=us-east-1 --azure-region=eastus
  - cat /root/.mu.yaml
  - ruby bin/mu-gen-docs
  - mkdir public
  - cp -Rf /var/www/html/docs/* public
  - ls public
  dependencies:
  - Gem Build
  only:
  - master
  - development
  - gen_docs
  artifacts:
    paths:
    - public/
  except:
    variables:
    - $IMAGE_BUILD

.GitHub Pages:
  stage: Deploy
  image: bitnami/git:latest
  script:
  - echo "Hello I am going to push to GitHub"
  - ssh-keyscan -H github.com >> ~/.ssh/known_hosts
  - git clone git@github.com:cloudamatic/cloudamatic.github.io.git
  - cp -Rf public/* cloudamatic.github.io
  - cd cloudamatic.github.io
  - git status
  - git add -a
  - git commit -m "$CI_COMMIT_MESSAGE"
  - git push origin master
  dependencies:
  - Gen Docs
  only:
  - master
  - gen_docs
  allow_failure: true
  except:
    variables:
    - $IMAGE_BUILD

Upload Gem:
  stage: Deploy
  script:
  - mkdir ~/.gem
  - cat .gitlab-ci/gem_credentials | sed -e "s/__RUBYGEMS_API_KEY__/${RUBYGEMS_API_KEY}/" > ~/.gem/credentials
  - chmod 0600 ~/.gem/credentials
  - gem push cloud-mu-*.gem
  - shred -u ~/.gem/credentials
  when: on_success
  dependencies:
  - Gem Build
  only:
  - master
  except:
    variables:
    - $IMAGE_BUILD

Upload Gem Manual:
  stage: Deploy
  script:
  - mkdir ~/.gem
  - cat .gitlab-ci/gem_credentials | sed -e "s/__RUBYGEMS_API_KEY__/${RUBYGEMS_API_KEY}/" > ~/.gem/credentials
  - chmod 0600 ~/.gem/credentials
  - gem push cloud-mu-*.gem
  - shred -u ~/.gem/credentials
  dependencies:
  - Gem Build
  when: manual
  only:
  - development
  - /^gem-.*$/
  - /^cicd-.*$/
  except:
    variables:
    - $IMAGE_BUILD

pages:
  stage: Deploy
  script:
  - ls public
  dependencies:
  - Gen Docs
  artifacts:
    paths:
    - public
  only:
  - master
  - gen_docs
  except:
    variables:
    - $IMAGE_BUILD

Base Images Linux:
  stage: Deploy
  script:
  - /opt/mu/lib/extras/generate-stock-images --clouds AWS --aws-creds egtprod --platforms centos6 centos7 rhel7
  tags:
  - mu-gitlab-runner
  only:
    variables:
    - $IMAGE_BUILD == "do_linux"

Base Images Windows:
  stage: Deploy
  script:
  - /opt/mu/lib/extras/generate-stock-images --clouds AWS --aws-creds egtprod --platforms win2k12 win2k16
  tags:
  - mu-gitlab-runner
  only:
    variables:
    - $IMAGE_BUILD == "do_windows"
