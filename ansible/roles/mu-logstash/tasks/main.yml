---

- name: remove firewalld
  package:
    name: firewalld
    state: absent

- name: make sure iptables is available
  package:
    name: iptables-services
    state: present

- name: allow inbound for internal services
  iptables:
    chain: INPUT
    source: "{{ mu_deployment['vpcs']['wrapper']['ip_block'] }}"
    destination_port: "{{ item }}"
    protocol: tcp
    jump: ACCEPT
  with_items:
  - "8080"
  - "8008"

- name: allow inbound for public traffic
  iptables:
    chain: INPUT
    source: 0.0.0.0/0
    destination_port: "{{ item }}"
    protocol: tcp
    jump: ACCEPT
  with_items:
  - "80"
  - "443"

- name: add yum repo for ElasticSearch
  yum_repository:
    name: elasticsearch
    gpgkey: https://artifacts.elastic.co/GPG-KEY-elasticsearch
    baseurl: https://artifacts.elastic.co/packages/7.x/yum
    description: Elasticsearch repository for 7.x packages

- name: install logstash and related packages
  package:
    name: "{{ item }}"
    state: present
  with_items:
  - logstash
  - apm-server
  - heartbeat-elastic
  - nginx
  - httpd-tools
  - policycoreutils-python

- name: Logstash config files in /etc/logstash
  copy:
    dest: "/etc/logstash/{{ item }}"
    src: "{{ item }}"
    mode: 0644
  become: yes
  with_items:
  - jvm.options
  - logstash.yml
  notify:
  - Restart logstash

- name: Logstash config files in /etc/logstash/conf.d
  copy:
    dest: "/etc/logstash/conf.d/{{ item }}"
    src: "{{ item }}"
    mode: 0644
  become: yes
  with_items:
  - 02-beats-input.conf
  - 10-rails-filter.conf
  notify:
  - Restart logstash

# Our sibling ElasticSearch server will just be using certificates signed by
# Mu's CA, so snag that for certificate verification
- name: Copy Mu's CA to /etc/logstash/elasticsearch-ca.pem
  copy:
    dest: /etc/logstash/elasticsearch-ca.pem
    src: /opt/mu/var/ssl/Mu_CA.pem
    mode: 0644
  become: yes

- name: Logstash Elastic integration config
  template:
    src: 30-elasticsearch-output.conf.j2
    dest: /etc/logstash/conf.d/30-elasticsearch-output.conf
    mode: 0644
  notify:
  - Restart logstash

- name: APM Server config
  template:
    src: apm-server.yml.j2
    dest: /etc/apm-server/apm-server.yml
    owner: root
    group: apm-server
    mode: 0644
  notify:
  - Restart apm-server

- name: Elastic Heartbeat config
  template:
    src: heartbeat.yml.j2
    dest: /etc/heartbeat/heartbeat.yml
    mode: 0600
  notify:
  - Restart heartbeat-elastic

- name: Copy Nginx certificate into place
  copy:
    dest: "/etc/ssl/certs/{{ inventory_hostname }}.crt"
    src: "/opt/mu/var/ssl/{{ inventory_hostname }}.crt"
    mode: 0644
  become: yes
  notify:
  - Restart nginx

- name: Make sure /etc/ssl/private exists
  file:
    path: /etc/ssl/private
    mode: 0077
    state: directory

- name: Copy Nginx key into place
  copy:
    dest: "/etc/ssl/private/{{ inventory_hostname }}.key"
    src: "/opt/mu/var/ssl/{{ inventory_hostname }}.key"
    mode: 0644
  become: yes
  notify:
  - Restart nginx

- name: Nginx configs
  template:
    src: "nginx/{{ item }}.j2"
    dest: "/etc/nginx/conf.d/{{ item }}"
    mode: 0644
  with_items:
  - apm.conf
  - default.conf
  - elastic.conf
  notify:
  - Restart nginx

- name: Enable and start APM Server
  service:
    name: apm-server
    state: started

- name: Enable and start logstash
  service:
    name: logstash
    state: started

- name: Enable and start Elastic Heartbeat
  service:
    name: heartbeat-elastic
    state: started

- name: Enable and start Nginx
  service:
    name: nginx
    state: started

# XXX (this insecure convolution belongs in some kind of shared library)
# We have to go through this tempfile dance because jinja doesn't actually see
# decrypted vault data, apparently, so as soon as we try to do anything other
# than write the whole decrypted blob to a file it fails to decrypt. That's
# even if we try the various workarounds from:
# https://github.com/ansible/ansible/issues/24425
- name: create Elastic password temp file (ugh)
  tempfile:
    state: file
    suffix: temp
  register: elasticpw_tmpfile
- name: "Write Elastic password to temp file"
  copy:
    dest: "{{ elasticpw_tmpfile.path }}"
    content: "{{ mu_vaults[mu_deploy_id]['elasticpw'] }}"
- name: "Load Elastic password from temp file"
  slurp:
    src: "{{ elasticpw_tmpfile.path }}"
  register: elasticpw_yaml
- name: From tmp YAML to dict
  set_fact:
    elasticpw_dict: "{{ elasticpw_yaml.content | b64decode | from_yaml }}"

- name: decrypt elastic password
  set_fact:
    elasticpw: "{{ elasticpw_dict['password'] }}"

- name: set elastic password
  command:
    cmd: "/bin/htpasswd -b -c /etc/nginx/htpasswd.users elastic \"{{ elasticpw }}\""
  no_log: true
  become: yes

- name: fix permissions on /etc/nginx/htpasswd.users
  file:
    path: /etc/nginx/htpasswd.users
    owner: nginx
    mode: 0600

- name: Check whether Kibana port is allowed
  shell: "/usr/sbin/semanage port -l | grep ^http_port_t | grep 5601"
  ignore_errors: true
  register: kibana_allowed
  no_log: true
  become: yes

- name: Allow Nginx to connect to Kibana
  command: "/usr/sbin/semanage port -a -t http_port_t -p tcp 5601"
  become: yes
  when: kibana_allowed is failed
  notify:
  - Restart nginx

- name: Check whether Elastic port is allowed
  shell: "/usr/sbin/semanage port -l | grep ^http_port_t | grep 9200"
  ignore_errors: true
  register: elastic_allowed
  no_log: true
  become: yes

- name: Allow Nginx to connect to Elastic
  command: "/usr/sbin/semanage port -m -t http_port_t -p tcp 9200"
  ignore_errors: true
  become: yes
  when: elastic_allowed is failed
  notify:
  - Restart nginx
