#!/usr/local/ruby-current/bin/ruby
# Copyright:: Copyright (c) 2019 eGlobalTech, Inc., all rights reserved
#
# Licensed under the BSD-3 license (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the root of the project or at
#
#     http://egt-labs.com/mu/LICENSE.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


require File.realpath(File.expand_path(File.dirname(__FILE__)+"/../bin/mu-load-config.rb"))
# now we have our global config available as the read-only hash $MU_CFG

require 'rubygems'
require 'bundler/setup'
require 'optimist'
require 'mu'

bok_dir = MU.myRoot+"/extras/image-generators"

available_clouds = {}
Dir.foreach(bok_dir) { |d|
  next if d == "." or d == ".."
  next if !Dir.exist?(MU.myRoot+"/extras/image-generators/"+d)
  available_clouds[d] = []
  Dir.foreach(bok_dir+"/"+d) { |yamlfile|
    next if !yamlfile.match(/(.+?)\.yaml$/)
    platform = Regexp.last_match[1]
    available_clouds[d] << platform
  }
}


$opts = Optimist::options do
  banner <<-EOS
Usage:
#{$0} [-c <cloud>] [-p <platform]
  EOS
  opt :clouds, "Clouds for which to generate images", :require => false, :type => :strings, :default => available_clouds.keys
  opt :platforms, "Platforms for which to generate images", :require => false, :type => :strings, :default => available_clouds.values.flatten.sort.uniq
end

pwd = Dir.pwd

$opts[:clouds].each { |cloud|
  current_images = MU::Cloud.getStockImage(cloud, fail_hard: true)
  $opts[:platforms].each { |platform|
    if File.exists?(bok_dir+"/"+cloud+"/"+platform+".yaml")
      conf_engine = MU::Config.new(bok_dir+"/"+cloud+"/"+platform+".yaml")
      stack_conf = conf_engine.config

      deployer = MU::Deploy.new(
        "dev",
        stack_conf: stack_conf
      )
      deployer.run
      MU.log "New images for #{cloud}:#{platform}", MU::NOTICE, details: deployer.mommacat.deployment['images']
      system(%Q{/opt/mu/lib/bin/mu-cleanup #{deployer.mommacat.deploy_id}})
    end
  }
}

Dir.chdir(pwd)
