#!/usr/local/ruby-current/bin/ruby
#
# Copyright:: Copyright (c) 2017 eGlobalTech, Inc., all rights reserved
#
# Licensed under the BSD-3 license (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the root of the project or at
#
#     http://egt-labs.com/mu/LICENSE.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Perform initial Mu setup tasks:
# 1. Set up an appropriate Security Group
# 2. Associate a specific Elastic IP address to this MU server, if required.
# 3. Create an S3 bucket for Mu logs.

require 'etc'
require 'securerandom'

require File.expand_path(File.dirname(__FILE__))+"/mu-load-config.rb"

require 'rubygems'
require 'bundler/setup'
require 'json'
require 'erb'
require 'trollop'
require 'json-schema'
require 'mu'
Dir.chdir(MU.installDir)

$opts = Trollop::options do
  banner <<-EOS
Usage:
#{$0} [-i] [-s] [-l] [-u] [-d]
  EOS
#  opt :ip, "Attempt to configure the IP requested in the CHEF_PUBLIC_IP environment variable, or if none is set, to associate an arbitrary Elastic IP.", :require => false, :default => false, :type => :boolean
#  opt :sg, "Attempt to configure a Security Group with appropriate permissions.", :require => false, :default => false, :type => :boolean
  opt :logs, "Ensure the presence of an Cloud Storage bucket prefixed with 'Mu_Logs' for use with CloudTrails, syslog, etc.", :require => false, :default => false, :type => :boolean
#  opt :dns, "Ensure the presence of a private DNS Zone called for internal amongst Mu resources.", :require => false, :default => false, :type => :boolean
  opt :uploadlogs, "Push today's log files to the Cloud Storage bucket created by the -l option.", :require => false, :default => false, :type => :boolean
end

#  instance = MU.myCloudDescriptor
#  preferred_ip = MU.mu_public_ip

# Create a security group, or manipulate an existing one, so that we have all
# of the appropriate network holes.
if $opts[:sg]
  open_ports = [80, 443, 2260, 7443, 8443, 9443, 8200]
end

$bucketname = $MU_CFG['google']['log_bucket_name']

if $opts[:logs]
  exists = false

  MU.log "Configuring log and secret Google Cloud Storage bucket '#{$bucketname}'"

  bucket = nil
  begin
    bucket = MU::Cloud::Google.storage.get_bucket($bucketname)
  rescue ::Google::Apis::ClientError => e
    if e.message.match(/notFound:/)
      MU.log "Creating #{$bucketname} bucket"
      bucketobj = MU::Cloud::Google.storage(:Bucket).new(
        name: $bucketname,
        location: "US", # XXX why is this needed?
        versioning: MU::Cloud::Google.storage(:Bucket)::Versioning.new(
          enabled: true
        ),
        lifecycle: MU::Cloud::Google.storage(:Bucket)::Lifecycle.new(
          rule: [ MU::Cloud::Google.storage(:Bucket)::Lifecycle::Rule.new(
            action: MU::Cloud::Google.storage(:Bucket)::Lifecycle::Rule::Action.new(
              type: "SetStorageClass",
              storage_class: "DURABLE_REDUCED_AVAILABILITY"
            ),
            condition: MU::Cloud::Google.storage(:Bucket)::Lifecycle::Rule::Condition.new(
              age: 180
            )
          )]
        )
      )
      bucket = MU::Cloud::Google.storage.insert_bucket(
        MU::Cloud::Google.defaultProject,
        bucketobj
      )
    else
      raise MuError, e.inspect
    end
  end

  ebs_key = nil

  begin
    ebs_key = MU::Cloud::Google.storage.get_object($bucketname, "log_vol_ebs_key")
  rescue ::Google::Apis::ClientError => e
    if e.message.match(/notFound:/)
      # XXX this may not be useful outside of AWS
      MU.log "Creating new key for encrypted log volume"
      key = SecureRandom.random_bytes(32)
      f = Tempfile.new("logvolkey") # XXX this is insecure and stupid
      f.write key
      f.close
      objectobj = MU::Cloud::Google.storage(:Object).new(
        bucket: $bucketname,
        name: "log_vol_ebs_key"
      )
      ebs_key = MU::Cloud::Google.storage.insert_object(
        $bucketname,
        objectobj,
        upload_source: f.path
      )
      f.unlink
    else
      raise MuError, e.inspect
    end
  end
end

if $opts[:dns]
end

if $opts[:uploadlogs]
  today = Time.new.strftime("%Y%m%d").to_s
  ["master.log", "nodes.log"].each { |log|
    if File.exists?("/Mu_Logs/#{log}-#{today}")
      MU.log "Uploading /Mu_Logs/#{log}-#{today} to bucket #{$bucketname}"
      MU::Cloud::AWS.s3.put_object(
          bucket: $bucketname,
          key: "#{log}/#{today}",
          body: File.read("/Mu_Logs/#{log}-#{today}")
      )
    else
      MU.log "No log /Mu_Logs/#{log}-#{today} was found", MU::WARN
    end
  }
end
