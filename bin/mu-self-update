#!/bin/sh
# Copyright:: Copyright (c) 2014 eGlobalTech, Inc., all rights reserved
#
# Licensed under the BSD-3 license (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the root of the project or at
#
#     http://egt-labs.com/mu/LICENSE.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

#################################################
################## SET VARIABLES ################
#################################################

scriptpath="`dirname $0`"

USER=`whoami`
HOMEDIR="`eval echo ~$USER`"
if [ "$CHEF_PUBLIC_IP" = "" -o "$MU_DATADIR" == "" ];then
        if [ -f /opt/mu/etc/mu.rc ];then
                source /opt/mu/etc/mu.rc
        fi
        if [ -f $HOMEDIR/.murc ];then
                source $HOMEDIR/.murc
        fi
fi
if [ -z $MU_DATADIR ];then
        echo "MU_DATADIR is unset, I don't know where to find Mu!"
        exit 1
fi

source $MU_INSTALLDIR/bin/mu-configure

cd $MU_LIBDIR

#################################################
################## Updated Cmds ################
#################################################
DEFAULT_BRANCH="master"

usage()
{
  echo "Updates Mu scripts in $MU_INSTALLDIR/bin. Optionally refreshes from git."
  echo "Usage: $0 [-b <branch>] [-f [-c <commit>] ] [-d] [-u] [-r]"
  echo "    -f: Forcibly re-sync $MU_LIBDIR from Git.  Saves your"
  echo "        working changes unless -d is specified."
  echo "    -c <commit> (requires -f): Reset to a specific commit."
  echo "    -b <branch>: Use a branch in $MU_LIBDIR other than $DEFAULT_BRANCH."
  echo "    -d: Discard local changes to current branch."
  echo "    -u: Update chef artifacts after update, regardless of cookbook changes."
  echo "    -r: Run chef-client after update, regardless of cookbook changes."
  exit 1
}

update_chef_artifacts=0
run_chef_client=0
while getopts "fb:c:sdruh" opt; do
  case $opt in
    f)
      force_sync=1
      ;;
    c)
      force_commit=$OPTARG
      ;;
    b)
      branch=$OPTARG
      ;;
    d)
      discard=1
      ;;
    r)
      run_chef_client=1
      ;;
    u)
      update_chef_artifacts=1
      ;;
    h)
      usage
      ;;
    \?)
      usage
      ;;
  esac
done

if [ "$force_commit" != "" -a "$force_sync" != "1" ];then
  usage
fi

mkdir -p $MU_DATADIR/tmp
/bin/cp -a $MU_LIBDIR/cookbooks $MU_DATADIR/tmp/cookbook_changes.$$
mkdir -p $MU_DATADIR/tmp/berks_changes.$$
/bin/cp -a $MU_LIBDIR/Berksfile* $MU_DATADIR/tmp/berks_changes.$$/
/bin/rm -f $MU_DATADIR/tmp/cookbook_changes.$$/cookbooks/mu-tools/files/default/Mu_CA.pem

cd $MU_LIBDIR
lastbranch="`git branch | egrep '^\* ' | awk '{print $2}'`"
if [ "$branch" == "" ];then
  branch=$lastbranch
fi
export MUBRANCH=$branch


# Stash unchecked local changes so we can put things back how we found them
if [ "$discard" != "1" ]; then
  stashed_changes=1
  if [ "`git stash | grep '^No local changes to save'`" ];then
    stashed_changes=0
  else
    echo "${GREEN}Stashing changes from working tree${NORM}"
    git --no-pager stash list | head -1
  fi
fi


# Swap branches, if pertinent
if [ "$branch" != "$lastbranch" ];then
  echo "${YELLOW}Switching from $lastbranch to $branch${NORM} in `pwd`"
  set +e
  git fetch
  set -e
  git checkout $branch
else
  set +e
  git fetch
  set -e
  git checkout -f $branch
fi

if [ "$force_sync" == "1" ]; then
  echo "${RED}Forcibly resetting $repo_name to branch $branch${NORM}"
  if [ ! -z $force_commit ];then
    # We got asked to reset to a particular commit, do so
    echo "${RED}Using comment $force_commit${NORM}"
    git reset --hard $force_commit
  else
    git reset --hard
  fi
  echo "${YELLOW}Updating $repo_name branch $branch from origin${NORM}"
  git pull origin $branch
else
  echo "${YELLOW}Updating $repo_name branch $branch from origin${NORM}"
  set +e
  git pull origin $branch
  set -e
fi

if [ "`diff -r $MU_LIBDIR/cookbooks/mu-master $MU_DATADIR/tmp/cookbook_changes.$$/mu-master`" != "" ];then
	run_chef_client=1
	set -- "-r" "$@"
fi
if [ "`diff -r $MU_LIBDIR/cookbooks $MU_DATADIR/tmp/cookbook_changes.$$`" != "" ];then
	update_chef_artifacts=1
	set -- "-u" "$@"
elif [ "`diff -r $MU_LIBDIR/Berksfile $MU_DATADIR/tmp/berks_changes.$$/Berksfile`" != "" ];then
	# Chowderheads sometimes forget to sync Berkshelf
	cd $MU_LIBDIR && /usr/local/ruby-current/bin/berks update
	update_chef_artifacts=1
	set -- "-u" "$@"
elif [ "`diff -r $MU_LIBDIR/Berksfile.lock $MU_DATADIR/tmp/berks_changes.$$/Berksfile.lock`" != "" ];then
	update_chef_artifacts=1
	set -- "-u" "$@"
fi

/bin/rm -rf $MU_DATADIR/tmp/cookbook_changes.$$
/bin/rm -rf $MU_DATADIR/tmp/berks_changes.$$

install_system_packages
set_hostname
configure_ec2_security_group
install_mu_executables $@ || install_cap_executables $@
set +e
install_ruby purgeold
set -e

echo "${GREEN}Updating bundles for Ruby deploy tools${NORM}"
cd $MU_LIBDIR/modules
export USE_SYSTEM_GECODE=1
if ! bundle install > /dev/null;then
	# If bundle failed, repeat while actually showing the output, then bail if
	# it failed again.
	bundle install || fail_with_message '`bundle install` failed'
fi
generate_docs

# Drop old local groups in favor of LDAP's versions
/usr/sbin/groupdel mu-users > /dev/null 2>&1
/usr/sbin/groupdel mu-admins > /dev/null 2>&1

set +e
patch_knife_windows
generate_ssl_certs skip_chef
install_chef
set_bash_defaults
setup_chef_cache $update_chef_artifacts
generate_ssl_certs
create_private_dns_zone
update_murc LOG_BUCKET_NAME $LOG_BUCKET_NAME
enable_audit_logs
start_momma_cat
rm -rf /root/.berkshelf /root/.chef/cookbooks /root/.chef/site_cookbooks
for extra in $ADDTL_CHEF_REPOS;do
	extra_repo_name="`echo $extra | sed 's/^.*\///' | cut -d. -f1`"
	clone_repository "$extra" "$MU_DATADIR/$extra_repo_name"
  generate_repo_berksfile "$MU_DATADIR/$extra_repo_name"
done

if [ $update_chef_artifacts == 1 ];then
	upload_chef_artifacts -r mu
	upload_chef_artifacts -n
fi
setup_localhost_chef_client
configure_nagios_server
if [ $run_chef_client == 1 ];then
	chef-client -o "role[mu-master]"
fi
set -e

if [ "$branch" != "$lastbranch" -a "$discard" != "1" ];then
  echo "${GREEN}You are now on ${BOLD}$branch${NORM}${GREEN} (you were on ${BOLD}$lastbranch${NORM}${GREEN})${NORM}"
fi
if [ "$stashed_changes" == "1" ];then
  if [ "$branch" != "$lastbranch" ];then
    echo "${GREEN}You have stashed changes from your working tree, see ${BOLD}git stash list${NORM}"
  else
    echo "${GREEN}Restoring stashed changes from your working tree${NORM}"
    git stash pop
  fi
fi
set_permissions
