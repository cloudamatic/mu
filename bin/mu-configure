#!/usr/local/ruby-current/bin/ruby
# Copyright:: Copyright (c) 2017 eGlobalTech, Inc., all rights reserved
#
# Licensed under the BSD-3 license (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the root of the project or at
#
#     http://egt-labs.com/mu/LICENSE.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'trollop'
require 'simple-password-gen'
require 'socket'
require 'open-uri'
require 'colorize'
require 'timeout'
require 'etc'
require 'aws-sdk-core'
require 'json'
require 'pp'
require 'readline'
require 'erb'

if Etc.getpwuid(Process.uid).name != "root"
  MU.log "#{$0} can only be run as root", MU::ERR
  exit 1
end

if ENV.has_key?("MU_INSTALLDIR")
  MU_BASE = ENV["MU_INSTALLDIR"]
else
  MU_BASE = "/opt/mu"
end

$INITIALIZE = !File.exists?("#{MU_BASE}/etc/mu.yaml")

$IN_AWS = false
begin
  Timeout.timeout(2) do
    instance_id = open("http://169.254.169.254/latest/meta-data/instance-id").read
    $IN_AWS = true if !instance_id.nil? and instance_id.size > 0
  end
rescue Timeout::Error
end
# XXX equivalents for other clouds

knife_template = "log_level                :info
log_location             STDOUT
node_name                '<%= user %>'
client_key               '<%= MU.dataDir %>/users/<%= user %>/<%= user %>.user.key'
validation_client_name   'mu-validator'
validation_key           '<%= MU.dataDir %>/orgs/<%= user %>/<%= user %>.org.key'
chef_server_url 'https://<%= MU.mu_public_addr %>:7443/organizations/<%= user %>'
chef_server_root 'https://<%= MU.mu_public_addr %>:7443/organizations/<%= user %>'
syntax_check_cache_path  '<%= home %>/.chef/syntax_check_cache'
cookbook_path [ '<%= home %>/.chef/cookbooks', '<%= home %>/.chef/site_cookbooks' ]
knife[:vault_mode] = 'client'
knife[:vault_admins] = ['<%= user %>']"

client_template = "chef_server_url  'https://<%= MU.mu_public_addr %>:7443/organizations/<%= user %>'
validation_client_name 'mu-validator'
log_location   STDOUT
node_name 'MU-MASTER'
verify_api_cert false
ssl_verify_mode :verify_none
"

$CHANGES = []

# Top-level keys in $MU_CFG for which we'll provide interactive, menu-driven
# configuration.
$CONFIGURABLES = {
  "public_address" => {
    "title" => "Public Address",
    "desc" => "IP address or hostname",
    "required" => true,
    "changes" => ["chef-server", "chefrun", "kniferb"]
  },
  "mu_admin_email" => {
    "title" => "Admin Email",
    "desc" => "Administative contact email",
    "pattern" => /\A([\w+\-].?)+@[a-z\d\-]+(\.[a-z]+)*\.[a-z]+\z/i,
    "required" => true,
    "changes" => ["mu-user", "chefrun"]
  },
  "hostname" => {
    "title" => "Local Hostname",
    "pattern" => /^[a-z0-9\-_]+$/i,
    "desc" => "The local system's value for HOSTNAME",
    "changes" => ["389ds"]
  },
  "banner" => {
    "title" => "Banner",
    "desc" => "Login banner, displayed in various locations",
    "changes" => ["chefrun"]
  },
  "repos" => {
    "title" => "Additional Repositories",
    "desc" => "Optional platform repositories, as a Git URL or Github repo name (ex: eGT-Labs/fema_platform.git)",
    "pattern" => /((git|ssh|http(s)?)|(git@[\w\.]+))(:(\/\/)?)([\w\.@\:\/\-~]+)(\.git)(\/)/,
    "array" => true
  },
  "master_runlist_extras" => {
    "title" => "Mu Master Runlist Extras",
    "desc" => "Optional extra Chef roles or recipes to invoke when running chef-client on this Master (ex: recipe[mycookbook::mumaster])",
    "array" => true,
    "changes" => ["master-runlist", "chefrun"]
  },
  "allow_invade_foreign_vpcs" => {
    "title" => "Invade Foreign VPCs?",
    "desc" => "If set to true, Mu will be allowed to modify routing and peering behavior of VPCs which it did not create, but for which it has permissions.",
    "boolean" => true
  },
  "aws" => {
    "title" => "Amazon Web Services",
    "subtree" => {
      "account_number" => {
        "title" => "Account Number",
        "desc" => "Account number for the Amazon Web Services account which we administer",
        "pattern" => /^\d+$/
      },
      "region" => {
        "title" => "Default Region",
        "desc" => "Default Amazon Web Services in which we operate"
      },
      "access_key" => {
        "title" => "Access Key",
        "desc" => "Credentials used for accessing the AWS API (looks like: AKIAINWLOOAA24PBRBZA)",
        "pattern" => /^[a-z0-9]$/i
      },
      "access_secret" => {
        "title" => "Access Secret",
        "desc" => "Credentials used for accessing the AWS API (looks like: +Z16iRP9QAq7EcjHINyEMs3oR7A76QpfaSgCBogp)"
      },
      "log_bucket_name" => {
        "title" => "Log Bucket Name",
        "desc" => "AWS S3 bucket into which we'll synchronize collected system logs",
        "changes" => ["chefrun"]
      }
    }
  }
}

$MENU_MAP = {}
def assignMenuEntries
  count = 1
  $CONFIGURABLES.each_pair { |key, data|
    if data.has_key?("subtree")
      letters = ("a".."z").to_a
      lettercount = 0
      data["subtree"].each_pair { |subkey, subdata|
        $CONFIGURABLES[key]["subtree"][subkey]["menu"] = count.to_s+letters[lettercount]
        $MENU_MAP[count.to_s+letters[lettercount]] = $CONFIGURABLES[key]["subtree"][subkey]
        lettercount = lettercount + 1
      }
    end
    $MENU_MAP[count.to_s] = $CONFIGURABLES[key]
    $CONFIGURABLES[key]["menu"] = count.to_s
    count = count + 1
  }
  $MENU_MAP.freeze
end

# Rustle up some sensible default values, if this is our first time
def setDefaults
  ips = []
  if $IN_AWS
    ["public-ipv4", "local-ipv4"].each { |addr|
      Timeout.timeout(2) do
        # XXX verify we won't melt down if public-ipv4 is unset
        ip = open("http://169.254.169.254/latest/meta-data/#{addr}").read
        ips << ip if !ip.nil? and ip.size > 0
      end
    }
  end
  # XXX equivalent for other clouds
  ips.concat(Socket.ip_address_list.delete_if { |i| !i.ipv4? or i.ip_address.match(/^(0\.0\.0\.0$|169\.254\.|127\.0\.)/) }.map { |a| a.ip_address })

  $CONFIGURABLES["allow_invade_foreign_vpcs"]["default"] = false
  $CONFIGURABLES["public_address"]["default"] = ips.first
  $CONFIGURABLES["hostname"]["default"] = Socket.gethostname
  $CONFIGURABLES["banner"]["default"] = "Mu Master at #{$CONFIGURABLES["public_address"]["default"]}"
  if $IN_AWS
    $CONFIGURABLES["aws"]["subtree"]["log_bucket_name"]["default"] = $CONFIGURABLES["hostname"]["default"]
    aws = JSON.parse(open("http://169.254.169.254/latest/dynamic/instance-identity/document").read)
    iam = open("http://169.254.169.254/latest/meta-data/iam/security-credentials").read # XXX test this doesn't blow up if none is set
    $CONFIGURABLES["aws"]["subtree"]["account_number"]["default"] = aws["accountId"]
    $CONFIGURABLES["aws"]["subtree"]["region"]["default"] = aws["region"]
    if iam and iam.size > 0
      # XXX can we think of a good way to test our permission set?
      $CONFIGURABLES["aws"]["subtree"]["access_key"]["desc"] = $CONFIGURABLES["aws"]["subtree"]["access_key"]["desc"] + ". Not necessary if IAM Profile #{iam.bold} has sufficient API access."
      $CONFIGURABLES["aws"]["subtree"]["access_secret"]["desc"] = $CONFIGURABLES["aws"]["subtree"]["access_key"]["desc"] + ". Not necessary if IAM Profile #{iam.bold} has sufficient API access."
    end
  else
    $CONFIGURABLES["aws"]["subtree"].delete("log_bucket_name")
  end
end

# Load values from our existing configuration into the $CONFIGURABLES hash
def importCurrentValues
  require File.realpath(File.expand_path(File.dirname(__FILE__)+"/mu-load-config.rb"))
  $CONFIGURABLES.each_key { |key|
    next if !$MU_CFG.has_key?(key)
    if $CONFIGURABLES[key].has_key?("subtree")
      # It's a sub-tree. I'm too lazy to write a recursive thing for this, just
      # cover the simple case that we actually care about for now.
      $CONFIGURABLES[key]["subtree"].keys.each { |subkey|
        next if !$MU_CFG[key].has_key?(subkey)
        $CONFIGURABLES[key]["subtree"][subkey]["value"] = $MU_CFG[key][subkey]
      }
    else
      $CONFIGURABLES[key]["value"] = $MU_CFG[key]
    end
  }
end

def printVal(data)
  if !data["value"].nil?
    print " - "+data["value"].to_s.green.on_black
  elsif data["required"]
    print " - "+"REQUIRED".red.on_black
  elsif !data["default"].nil?
    print " - "+data["default"].to_s.yellow.on_black+" (DEFAULT)"
  end
end

# Converts the current $CONFIGURABLES object to a Hash suitable for merging
# with $MU_CFG.
def setConfigTree
  cfg = {}
  $CONFIGURABLES.each_pair { |key, data|
    if data.has_key?("subtree")
      data["subtree"].each_pair { |subkey, subdata|
        if !subdata["value"].nil?
          cfg[key] ||= {}
          cfg[key][subkey] = subdata["value"]
        elsif !subdata["default"].nil? and $INITIALIZE
          cfg[key] ||= {}
          cfg[key][subkey] = subdata["default"]
        end
      }
    elsif !data["value"].nil?
      cfg[key] = data["value"]
    elsif !data["default"].nil? and $INITIALIZE
      cfg[key] = data["default"]
    end
  }
  cfg
end

def displayCurrentOpts
  count = 1
  optlist = []
  $CONFIGURABLES.each_pair { |key, data|
    print data["menu"].bold+") "+data["title"]
    if data.has_key?("subtree")
      puts ""
      data["subtree"].each_pair { |subkey, subdata|
        print "  "+subdata["menu"].bold+". "+subdata["title"]
        printVal(subdata)
        puts ""
      }
    else
      printVal(data)
      puts ""
    end
    count = count + 1
  }
  optlist
end

###############################################################################

if $INITIALIZE
  setDefaults
else
  importCurrentValues
end
assignMenuEntries # populates and freezes $MENU_MAP

trap("INT"){ puts "" ; exit }

def ask(desc)
  puts ""
  puts (desc['required'] ? "REQUIRED".red.on_black : "OPTIONAL".yellow.on_black)+" - "+desc["desc"]
  puts "Enter one or more values, separated by commas".yellow.on_black if desc['array']
  puts "Enter 0 or false, 1 or true".yellow.on_black if desc['boolean']
  prompt = desc["title"].bold + "> "
  current = desc['value'] || desc['default']
  if current
    current = current.join(", ") if desc['array'] and current.is_a?(Array)
    Readline.pre_input_hook = -> do
      Readline.insert_text current.to_s
      Readline.redisplay
      Readline.pre_input_hook = nil
    end
  end
  val = Readline.readline(prompt, false)
  if desc['array']  and !val.nil?
    val = val.strip.split(/\s*,\s*/)
  end
  if desc['boolean']
    val = false if ["0", "false", "FALSE"].include?(val)
    val = true if ["1", "true", "TRUE"].include?(val)
  end
  val = current if val.nil?
  val
end

def validate(newval, reqs)
  ok = true
  def validate_individual_value(newval, reqs)
    ok = true
    if reqs['boolean'] and newval != true and newval != false and newval != nil
      puts "\nInvalid value '#{newval.bold}' (must be true or false)".light_red.on_black+"\n\n"
      ok = false
    elsif reqs['pattern'] and !newval.match(reqs['pattern'])
      puts "\nInvalid value '#{newval.bold}' (must match #{reqs['pattern']})".light_red.on_black+"\n\n"
      ok = false
    end
    ok
  end
  if reqs['array']
    if !newval.is_a?(Array)
      puts "\nInvalid value '#{newval.bold}' (should be an array)".light_red.on_black+"\n\n"
      ok = false
    else
      newval.each { |v|
        ok = false if !validate_individual_value(v, reqs)
      }
    end
  else
    ok = false if !validate_individual_value(newval, reqs)
  end
  ok
end

answer = nil
changed = false
begin
  optlist = displayCurrentOpts
  begin
    print "Enter an option to change, "+"O".bold+" to save this config, or "+"^D".bold+" to quit.\n> "
    answer = gets
    if answer.nil?
      puts ""
      exit 0
    end
    answer.strip!
  rescue EOFError
    puts ""
    exit 0
  end
  if $MENU_MAP.has_key?(answer)
    newval = ask($MENU_MAP[answer])
    if !validate(newval, $MENU_MAP[answer])
      sleep 1
      next
    end
    $MENU_MAP[answer]['value'] = newval == "" ? nil : newval
    $CHANGES.concat($MENU_MAP[answer]['changes']) if $MENU_MAP[answer].include?("changes")
    if $MENU_MAP[answer]['title'] == "Local Hostname"
      $CONFIGURABLES["aws"]["subtree"]["log_bucket_name"]["default"] = newval
    elsif $MENU_MAP[answer]['title'] == "Public Address"
      $CONFIGURABLES["banner"]["default"] = "Mu Master at #{newval}"
    end
    changed = true
    puts ""
  elsif !["", "0", "O", "o"].include?(answer)
    puts "\nInvalid option '#{answer.bold}'".light_red.on_black+"\n\n"
    sleep 1
  end
end while answer != "0" and answer != "O" and answer != "o"


def set389DSCreds
  require 'mu'
  credlist = {
    "bind_creds" => {
      "user" => "CN=mu_bind_creds,#{$MU_CFG["ldap"]['user_ou']}"
    },
    "join_creds" => {
      "user" => "CN=mu_join_creds,#{$MU_CFG["ldap"]['user_ou']}"
    },
    "cfg_directory_adm" => {
      "user" => "admin"
    },
    "root_dn_user" => {
      "user" => "CN=root_dn_user"
    }
  }
  credlist.each_pair { |creds, cfg|
    begin
      data = nil
      if $MU_CFG["ldap"].has_key?(creds)
        data = MU::Groomer::Chef.getSecret(
          vault: $MU_CFG["ldap"][creds]["vault"],
          item: $MU_CFG["ldap"][creds]["item"]
        )
        MU::Groomer::Chef.grantSecretAccess("MU-MASTER", $MU_CFG["ldap"][creds]["vault"], $MU_CFG["ldap"][creds]["item"])
      else
        data = MU::Groomer::Chef.getSecret(vault: "mu_ldap", item: creds)
        MU::Groomer::Chef.grantSecretAccess("MU-MASTER", "mu_ldap", creds)
      end
    rescue MU::Groomer::Chef::MuNoSuchSecret
      user = cfg["user"]
      pw = Password.pronounceable(14..16)
      if $MU_CFG["ldap"].has_key?(creds)
        data = {
          $MU_CFG["ldap"][creds]["username_field"] => user,
          $MU_CFG["ldap"][creds]["password_field"] => pw
        }
        MU::Groomer::Chef.saveSecret(
          vault: $MU_CFG["ldap"][creds]["vault"],
          item: $MU_CFG["ldap"][creds]["item"],
          data: data,
          permissions: "name:MU-MASTER"
        )
      else
        MU::Groomer::Chef.saveSecret(
          vault: "mu_ldap",
          item: creds,
          data: { "username" => user, "password" => pw },
          permissions: "name:MU-MASTER"
        )
      end
    end
  }
end

if $INITIALIZE
  $MU_SET_DEFAULTS = setConfigTree
  require File.realpath(File.expand_path(File.dirname(__FILE__)+"/mu-load-config.rb"))
elsif changed
  saveMuConfig($MU_CFG.merge(setConfigTree))
else
  require File.realpath(File.expand_path(File.dirname(__FILE__)+"/mu-load-config.rb"))
end
require 'mu'

if $INITIALIZE
  system("chef-client -o 'recipe[mu-master::ssl-certs]'")
end
# XXX Firewall holes (man I'd like for Chef to do that work)

if $INITIALIZE or $CHANGES.include?("chef-server")
  erb = ERB.new(File.read("#{MU_BASE}/lib/cookbooks/mu-master/templates/default/chef-server.rb.erb"))
  updated_server_cfg = erb.result(binding)
  File.open("/etc/opscode/chef-server.rb", File::CREAT|File::TRUNC|File::RDWR, 0644){ |f|
    f.puts updated_server_cfg
  }

  puts "Chef Server config was modified, reconfiguring...".yellow.on_black
  %x{/opt/opscode/bin/chef-server-ctl reconfigure}
end

if $INITIALIZE or $CHANGES.include?("kniferb")
  erb = ERB.new(knife_template)
  user = "mu"
  home = Etc.getpwnam("root").dir
  kniferb = erb.result(binding)
  MU.log "Updating #{home}/.chef/knife.rb", MU::NOTICE
  File.open(home+"/.chef/knife.rb", File::CREAT|File::TRUNC|File::RDWR, 0644){ |f|
    f.puts kniferb
  }
  %x{rm -f #{home}/.chef/trusted_certs/* ; knife ssl fetch -c #{home}/.chef/knife.rb}
  erb = ERB.new(client_template)
  clientrb = erb.result(binding)
  MU.log "Updating /etc/chef/client.rb", MU::NOTICE
  File.open("/etc/chef/client.rb", File::CREAT|File::TRUNC|File::RDWR, 0644){ |f|
    f.puts clientrb
  }
end

if $MU_CFG['ldap']['type'] == "389 Directory Services" 
  if $INITIALIZE or $CHANGES.include?("389ds")
    set389DSCreds
    system("chef-client -o 'recipe[mu-master::389ds]'")
    MU::Master::LDAP.initLocalLDAP
  end
end

if !File.exists?("#{MU_BASE}/var/users/mu/email") or !File.exists?("#{MU_BASE}/var/users/mu/realname")
  # Turn our stub system user 'mu' into a real boy.
  %x{#{MU_BASE}/lib/bin/mu-user-manage mu -a -s -e "#{$MU_CFG['mu_admin_email']}" -l mu -n "Mu Master" -g --no-scratchpad --no-notify-user}
end

# Figure out if our run list is dumb
MU::Groomer::Chef.loadChefLib
chef_node = ::Chef::Node.load("MU-MASTER")
run_list = ["role[mu-master]"]
run_list.concat($MU_CFG['master_runlist_extras']) if $MU_CFG['master_runlist_extras'].is_a?(Array)
set_runlist = false
run_list.each { |rl|
  set_runlist = true if !chef_node.run_list?("role[mu-master]")
}
if set_runlist
  MU.log "Setting MU-MASTER run_list", MU::NOTICE, details: run_list
  chef_node.run_list(run_list)
  chef_node.save
  $CHANGES << "chefrun"
end



if $INITIALIZE or $CHANGES.include?("chefrun")
  system(chef-client)
end


if $INITIALIZE
  puts "Setting password for admin user 'mu', for logging into Nagios and other built-in services.".green.on_black
  puts %x{#{MU_BASE}/lib/bin/mu-user-manage -g mu}
  puts "If Scratchpad web interface is not accessible, try the following:\n#{MU_BASE}/lib/bin/mu-user-manage -g --no-scratchpad mu".green.on_black
end
